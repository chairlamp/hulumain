generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles
enum Role {
  CUSTOMER
  ADMIN
  DELIVERY_AGENT
}

// Order status
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  image         String?
  role          Role           @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addresses     Address[]
  orders        Order[]        // Orders placed by the user
  deliveries    Order[]        @relation("DriverOrders") // Orders delivered by the driver
  favorites     Favorite[]
  reviews       Review[]
  cart          Cart?
  driverStatus  DriverStatus?
  passwordReset PasswordReset?
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street     String
  city       String
  state      String?
  postalCode String?
  country    String
  isDefault  Boolean  @default(false)
  latitude   Decimal? @db.Decimal(10, 8)
  longitude  Decimal? @db.Decimal(11, 8)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]
}

model Restaurant {
  id                  String     @id @default(cuid())
  name                String
  description         String?
  address             String
  image               String?
  category            String?
  rating              Decimal?   @db.Decimal(3, 2)
  deliveryFee         Decimal?   @db.Decimal(10, 2)
  estimatedDeliveryTime Int?
  isOpen              Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  menuItems           MenuItem[]
  orders              Order[]
  favorites           Favorite[]
  reviews             Review[]
  carts               Cart[]
}

model MenuItem {
  id          String      @id @default(cuid())
  restaurantId String
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  image       String?
  category    String?
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id                 String      @id @default(cuid())
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  restaurantId       String
  restaurant         Restaurant  @relation(fields: [restaurantId], references: [id])
  addressId          String
  address            Address     @relation(fields: [addressId], references: [id])
  driverId           String?
  driver             User?       @relation("DriverOrders", fields: [driverId], references: [id])
  status             OrderStatus @default(PENDING)
  total              Decimal     @db.Decimal(10, 2)
  deliveryFee        Decimal?    @db.Decimal(10, 2)
  tip                Decimal     @default(0) @db.Decimal(10, 2)
  specialInstructions String?
  placedAt           DateTime    @default(now())
  preparedAt         DateTime?
  pickedUpAt         DateTime?
  deliveredAt        DateTime?
  cancelledAt        DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  items              OrderItem[]
  reviews            Review[]
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId          String
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
  quantity            Int
  price               Decimal  @db.Decimal(10, 2)
  specialInstructions String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([userId, restaurantId])
}

model Review {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orderId      String?
  order        Order?     @relation(fields: [orderId], references: [id])
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Cart {
  id           String     @id @default(cuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  items        CartItem[]
}

model CartItem {
  id                  String   @id @default(cuid())
  cartId              String
  cart                Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  menuItemId          String
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
  quantity            Int
  specialInstructions String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model DriverStatus {
  id                 String    @id @default(cuid())
  driverId           String    @unique
  driver             User      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  isOnline           Boolean   @default(false)
  latitude           Decimal?  @db.Decimal(10, 8)
  longitude          Decimal?  @db.Decimal(11, 8)
  lastLocationUpdate DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
